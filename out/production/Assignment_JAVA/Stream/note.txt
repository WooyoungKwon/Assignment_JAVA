1. Stream
 - 컬렉션이 데이터의 공간적 집합체라면, 스트림은 데이터의 '시간적 집합체'이다.

 - 중간 단계의 연산 결과를 저장하지 않기 때문에 무한 데이터의 처리가 가능하다.

 - 원소에 직접 접근하거나 조작하는 수단을 제공하지 않는다.

 - 따라서 내부에서 반복문을 실행해주기 때문에 인덱스를 다룰 필요가 없다.

 o 배열로부터 스트림 생성
    - IntStream stream(int[] array)     -> 정수형 스트림 생성(long 및 double도 사용법은 같다)
    - IntStream 변수명 = IntStream.of(배열) /
    - Stream<String> ss = 리스트.stream()      -> 배열, 리스트 스트림 생성
    - Stream<String> 변수명 = Stream.of(배열) /

 - 느긋한 연산은 조급한 연산이 원소를 요구할 때까지 아무 연산도 수행하지 않고 기다린다.
    - 최종 연산이 포함되기 전까지는 어떠한 원소도 파이프 라인으로 전달되지 않는다.

 - filter()와 sorted() -> 중간 연산(느긋한 연산)
   forEach() -> 최종 연산(조급한 연산)

 - 스트림 생성.parallel -> 병렬 스트림, 스트림을 생성할 때 일반적으로 더욱 짧은 시간이 소요된다.

 o 필터링
    - filter() -> Predicate 타입을 사용하여 통과시킬 기준을 제시한다.
    - distinct() -> 중복된 원소를 제거한다. (hashCode()와 equals()의 결과로 결정)
    - limit() -> 주어진 개수만큼만의 원소를 다음 스트림으로 넘긴다.
    - skip() -> 주어진 개수만큼의 원소를 건너뛴다.